name: "template_match_layers"

########## data layers ##########

layer {
    name: "template"
    type: "MultiLabelImageData"
    top: "data_template"
    top: "center_target"
    include {
        phase: TRAIN
    }
    multi_label_image_data_param {
        source: "/run/media/larry/fafb882a-0878-4e0a-9ccb-2fb979b7f717/e3dengine/caffe/examples/template_match/Link to template_match/SFZ/template_data.txt"
        label_num: 2
        batch_size: 100
    }
    transform_param {
        mirror: false
        mean_value:128
        scale: 0.00625 #????????????????
    }
}
layer {
    name: "search"
    type: "ImageData"
    top: "data_search"
    top: "confidence_label"
    include {
        phase: TRAIN
    }
    image_data_param {
        source: "/run/media/larry/fafb882a-0878-4e0a-9ccb-2fb979b7f717/e3dengine/caffe/examples/template_match/Link to template_match/SFZ/search_data.txt"
        batch_size: 100
    }
    transform_param {
        mirror: false
        mean_value: 128
        scale: 0.00625
    }
}
########## EOF data layers ##########

########## First siamese layers ##########
### left
layer {
    name: "conv1_1"
    type: CONVOLUTION
    bottom: "data_template"
    top: "conv1_1"
    param {
        name: "conv1_1_w"
        lr_mult: 1
    }
    param {
        name: "conv1_1_b"
        lr_mult: 2
    }
    convolution_param {
        num_output: 64
        pad: 1
        kernel_size: 3
        stride: 1
    }
}

layer {
    name: "relu1_1"
    bottom: "conv1_1"
    top: "conv1_1"
    type: "ReLU"
}

layer {
    name: "conv1_2"
    type: CONVOLUTION
    bottom: "conv1_1"
    top: "conv1_2"
    param {
        name: "conv1_2_w"
        lr_mult: 1
    }
    param {
        name: "conv1_2_b"
        lr_mult: 2
    }
    convolution_param {
        num_output: 64
        pad: 1
        kernel_size: 3
        stride: 1
    }
}

layer {
    name: "relu1_2"
    bottom: "conv1_2"
    top: "conv1_2"
    type: RELU
}

layer {
    name: "pool1"
    type: POOLING
    bottom: "conv1_2"
    top: "pool1"
    pooling_param {
        name: "pool1_w"
        pool: MAX
        kernel_size: 2
        stride: 2
    }
}

### right
layer {
    name: "conv1_1_p"
    type: CONVOLUTION
    bottom: "data_search"
    top: "conv1_1_p"
    param {
        name: "conv1_1_w"
        lr_mult: 1
    }
    param {
        name: "conv1_1_b"
        lr_mult: 2
    }
    convolution_param {
        num_output: 64
        pad: 1
        kernel_size: 3
        stride: 1
    }
}

layer {
    name: "relu1_1_p"
    bottom: "conv1_1_p"
    top: "conv1_1_p"
    type: RELU
}

layer {
    name: "conv1_2_p"
    type: CONVOLUTION
    bottom: "conv1_1_p"
    top: "conv1_2_p"
    param {
        name: "conv1_2_w"
        lr_mult: 1
    }
    param {
        name: "conv1_2_b"
        lr_mult: 2
    }
    convolution_param {
        num_output: 64
        pad: 1
        kernel_size: 3
        stride: 1
    }
}

layer {
    name: "relu1_2_p"
    bottom: "conv1_2_p"
    top: "conv1_2_p"
    type: RELU
}

layer {
    name: "pool1_p"
    type: POOLING
    bottom: "conv1_2_p"
    top: "pool1_p"
    pooling_param {
        name: "pool1_w"
        pool: MAX
        kernel_size: 2
        stride: 2
    }
}


### FC layers 1 for search image side, output transform params
layer {
    name: "fc1_st1"
    type: INNER_PRODUCT
    bottom: "pool1_p"
    top: "fc1_st1"
    inner_product_param {
        num_output: 4096
    }
}

layer {
    name: "relu1_st1"
    top: "fc1_st1"
    bottom: "fc1_st1"
    type: RELU
}

layer {
  name: "drop1_st1"
  type: DROPOUT
  bottom: "fc1_st1"
  top: "drop1_st1"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
    name: "fc2_st1"
    type: INNER_PRODUCT
    bottom: "drop1_st1"
    top: "fc2_st1"
    inner_product_param {
        num_output: 256
    }
}

layer {
    name: "relu2_st1"
    type: "ReLU"
    bottom: "fc2_st1"
    top: "fc2_st1"
}

layer {
    name: "drop2_st1"
    type: DROPOUT
    bottom: "fc2_st1"
    top: "drop2_st1"
    dropout_param {
        dropout_ratio: 0.5
    }
}

layer {
    name: "fc3_st1"
    type: INNER_PRODUCT
    bottom: "drop2_st1"
    top: "center_st1"
    inner_product_param {
        num_output: 2
    }
}

layer {
    name: "trans_st1"
    type: "SpatialTransformer"
    bottom: "center_st1"
    bottom: "pool1_p"
    top: "out_st1"
    st_param {
        output_H: 16  # same size as template
        output_W: 16
        theta_1_1: -0.5  # fix anti-diagonal params
        theta_1_2: 0
        theta_2_1: 0
        theta_2_2: 0.5
    }
}


########## FC layer to compute match confidence ##########
layer {
    name: "concat1"
    bottom: "pool1"
    bottom: "out_st1"
    top: "out1"
    type: "Concat"
    concat_param {
        axis: 1     #0 for concatenation along num and 1 for channels
    }
}

layer {
    name: "fc1"
    type: INNER_PRODUCT
    bottom: "out1"
    top: "fc1"
    inner_product_param {
        num_output: 4096
    }
}

layer {
    name: "relu1"
    type: RELU
    bottom: "fc1"
    top: "fc1"
}

layer {
    name: "drop1"
    type: DROPOUT
    bottom: "fc1"
    top: "drop1"
    dropout_param {
        dropout_ratio: 0.5
    }
}

layer {
    name: "fc2"
    type: INNER_PRODUCT
    bottom: "drop1"
    top: "fc2"
    inner_product_param {
        num_output: 256
    }
}

layer {
    name: "relu2"
    type: "ReLU"
    bottom: "fc2"
    top: "fc2"
}

layer {
    name: "drop2"
    type: DROPOUT
    bottom: "fc2"
    top: "drop2"
    dropout_param {
        dropout_ratio: 0.5
    }
}

layer {
    name: "fc3"
    type: INNER_PRODUCT
    bottom: "drop2"
    top: "prob"
    inner_product_param {
        num_output: 2
    }
}

########## Loss layer ##########
layer {
    name: "loss_confidence"
    type: "SoftmaxWithLoss"
    bottom: "prob"
    bottom: "confidence_label"
    top: "loss_confidence"
    loss_weight: 1
    include {
        phase: TRAIN
    }
}
layer {
    name: "loss_translation"
    type: "EuclideanLoss"
    bottom: "center_st1"
    bottom: "center_target"
    top: "loss_translation"
    include {
        phase: TRAIN
    }
}
layer {
    name: "loss_regression"
    type: "Scale"
    bottom: loss_translation
    bottom: confidence_label
    top: "loss_regression"
    scale_param {
        axis: 1    # product applied to channel dimension
    }
    include {
        phase: TRAIN
    }
    loss_weight: 1
}
